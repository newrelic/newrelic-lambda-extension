AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: A complete application stack, instrumented with New Relic Distributed Tracing

Parameters:
  NRAccountId:
    Type: String
    Description: Your New Relic account ID; necessary for distributed tracing.
    AllowedPattern: '[0-9]+'
  TrustedAccountId:
    Type: String
    Description: Your New Relic account ID; necessary for distributed tracing.
    AllowedPattern: '[0-9]+'


Globals:
  Function:
    Timeout: 30

Resources:
  # An SQS queue, which the Python lambda will produce to, and the Node lambda will be triggered by
  SimpleQueue:
    Type: AWS::SQS::Queue

  # An SNS topic, which the Node lambda will produce to, and the Java lambda will be triggered by
  SnsTopic:
    Type: AWS::SNS::Topic

  PythonSqsSender:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: python/rest_handler/
      Handler: newrelic_lambda_wrapper.handler
      Runtime: python3.8
      Environment:
        Variables:
          # For the instrumentation handler to invoke your real handler, we need this value
          NEW_RELIC_LAMBDA_HANDLER: app.lambda_handler
          NEW_RELIC_ACCOUNT_ID: !Sub ${NRAccountId}
          NEW_RELIC_TRUSTED_ACCOUNT_KEY: !Sub ${TrustedAccountId}
          QUEUE_URL: !Ref SimpleQueue
          # NEW_RELIC_EXTENSION_SEND_FUNCTION_LOGS: true
          # NEW_RELIC_EXTENSION_LOG_LEVEL: DEBUG
      Layers:
        # This layer includes the New Relic Lambda Extension, a sidecar process that sends telemetry,
        # as well as the New Relic Agent for Python, and a handler wrapper that makes integration easy.
        - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:451483290750:layer:NewRelicPython38:39
      Policies:
        # This policy allows the lambda to know the value of the New Relic license key. We need this so
        # that we can send telemetry back to New Relic
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !ImportValue NewRelicLicenseKeySecret-NewRelic-LicenseKeySecretARN
        - SQSSendMessagePolicy:
            QueueName: !GetAtt SimpleQueue.QueueName
      Events:
        PythonSqsSender:
          Type: Api
          Properties:
            Path: /hello
            Method: POST
        PythonSqsPage:
          Type: Api
          Properties:
            Path: /hello
            Method: GET
  PythonLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: {"Fn::Join": ["", ["/aws/lambda/", {"Ref": "PythonSqsSender"}]]}
      # Lambda functions will auto-create their log group on first execution, but it retains logs forever, which can get expensive.
      RetentionInDays: 7

  NodeAndSQS:
    Type: AWS::Serverless::Function
    Properties:
      Description: A Lambda function that logs the payload of messages sent to an associated SQS queue.
      Runtime: nodejs12.x
      CodeUri: node/
      Handler: newrelic-lambda-wrapper.handler
      Environment:
        Variables:
          # For the instrumentation handler to invoke your real handler, we need this value
          NEW_RELIC_LAMBDA_HANDLER: src/handlers/sqs-sns-bridge.sqsHandler
          NEW_RELIC_ACCOUNT_ID: !Sub ${NRAccountId}
          NEW_RELIC_TRUSTED_ACCOUNT_KEY: !Sub ${TrustedAccountId}

          SNS_TOPIC: !Ref SnsTopic

          # NEW_RELIC_EXTENSION_SEND_FUNCTION_LOGS: true
          # NEW_RELIC_EXTENSION_LOG_LEVEL: DEBUG
      Events:
        QueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt SimpleQueue.Arn
      MemorySize: 128
      Timeout: 25 # Chosen to be less than the default SQS Visibility Timeout of 30 seconds
      Layers:
        # This layer includes the New Relic Lambda Extension, a sidecar process that sends telemetry,
        # as well as the New Relic Agent for Node.js, and a handler wrapper that makes integration easy.
        - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:451483290750:layer:NewRelicNodeJS12X:44
      Policies:
        # This policy allows the lambda to know the value of the New Relic licence key. We need this so
        # that we can send telemetry back to New Relic
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !ImportValue NewRelicLicenseKeySecret-NewRelic-LicenseKeySecretARN
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt SnsTopic.TopicName
  NodeLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: {"Fn::Join": ["", ["/aws/lambda/", {"Ref": "NodeAndSQS"}]]}
      # Lambda functions will auto-create their log group on first execution, but it retains logs forever, which can get expensive.
      RetentionInDays: 7

  JavaDtSns:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: java/DtSnsFunction
      Handler: dtsnsexample.App::handleRequest
      Runtime: java11
      MemorySize: 512
      Environment:
        Variables:
          NEW_RELIC_ACCOUNT_ID: !Sub ${NRAccountId}
          NEW_RELIC_TRUSTED_ACCOUNT_KEY: !Sub ${TrustedAccountId}
      Events:
        SnsTopic:
          Type: SNS
          Properties:
            Topic: !Ref SnsTopic
      Layers:
        # This layer includes the New Relic Lambda Extension, a sidecar process that sends telemetry,
        - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:451483290750:layer:NewRelicLambdaExtension:12
      Policies:
        # This policy allows the lambda to know the value of the New Relic licence key. We need this so
        # that we can send telemetry back to New Relic
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !ImportValue NewRelicLicenseKeySecret-NewRelic-LicenseKeySecretARN
  JavaLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: {"Fn::Join": ["", ["/aws/lambda/", {"Ref": "JavaDtSns"}]]}
      # Lambda functions will auto-create their log group on first execution, but it retains logs forever, which can get expensive.
      RetentionInDays: 7


Outputs:
  PythonSqsSenderApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
