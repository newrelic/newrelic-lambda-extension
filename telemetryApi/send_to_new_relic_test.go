package telemetryApi

import (
	"newrelic-lambda-extension/util"
	"testing"
)

func Test_marshalAndCompressDataSplitsBatches(t *testing.T) {
	type args struct {
		d        *Dispatcher
		data     []map[string]interface{}
		dataType string
	}
	tests := []struct {
		name    string
		args    args
		wantLen int
		wantErr bool
	}{
		{
			name: "control",
			args: args{
				d: &Dispatcher{
					compressTool: util.NewCompressTool(),
				},
				data: []map[string]interface{}{
					{
						"control": "this should marshal correctly",
					},
				},
				dataType: "control",
			},
			wantLen: 1,
		},
		{
			name: "should split",
			args: args{
				d: &Dispatcher{
					compressTool: util.NewCompressTool(),
				},
				data: []map[string]interface{}{
					{
						"one": `254 123  17  16 242  12  25 252 154 238 157  38 163 213 192  64 
						180  73 151  16 193  50 246 206 197 203   7  77 172 231  49 146 
						178 186 222 234  34 185 102 138  96 222 210 176 211 176 162 108 
						 20   5 101 225  73 118 190 202 117 205  17  16 114 189 143  45 
						156 225  68   5 178  78 238  11  74 251 245 239 148 115 191 100 
						240 172 145 107  30 252 144 198 147  53 184 223 133 255  78 164 
						220  26   7 211 164   5  10 238 232 165 185  12  92 173 243 139 
						154  88 182 110  77 209  60 177  18 248 181 153  96 169  96  61 
						 99 206 241  59  11 140  84  19  31 164 255 217 186 128  48 115 
						228  58  72 247  35 159 142 119  38 106 147 234 100 224  63 193 
						211  78  73  64 125  81 216  27 107  58 120 182  86 111  37 155 
						229 100  90  85 223 137  65  62  34 248  91 246 117  86 226 244 
						 21 203 230 238 174  28 150 135   4 127 216  13 205 223  22  91 
						 74 189 132 118 215 243  38  32  81 167  46  12 243 136  48   5 
						217 200 169 240 213  52 124  33 247 171 240  65 136  60 131  78 
						129 121 216  24  86 249 144  81 158 207 110 134 215 254  83  34 
						 87 110  81  55  74  99 230  32  73 151   4 127 123  82  73  77 
						149  31 165  22 155  36 242 155  46 209 175 120 110 196  58 142 
						103 164  73 183   9 154 254 195   5 167  88 139  29 224 115 128 
						116 254 233  62 255 228 193  65 194 204 174 169  22 112 215 187 
						 51 232  56  22 189 125   9  66 124  48 173 245 165  47 225  59 
						 34 145 218 172 107  96 175 228 213   1 204 250 218 239 160  90 
						 28  47 119  47 236  28 177 254 127  57  93  52 105  34 153 210 
						149 160 172  26  14  12 242 140  23   0 109  76  60 148  71 157 
						171 254 175  92  57 198 149 185  42 100 235  79 217  92 101 151 
						 55  90 136  33 171 140  59   7 205 141 163  75 162  39  77 185 
						101 124 110 217 102  66 207 128 245 203   6 208 187  31 118   3 
						169  98  85  97 213   8  74 241  89 173 129 222  54 176 208  38 
						195 180 216 246 221  69 127  67  97 247  76 173 203 118 179  80 
						209  37  55  71 183 157 155 180  51 227 236  23 188  75 241  97 
						 72 103 105 231   9 143 101 250 247 216  97 106  56 202  63  89 
						 53 102 231  18  10 172 209 246 231 229 179 192 125 216  40  79 
						238 242  90  30  15  62  49 226 152  14  50 255 121  14  72  54 
						199 139 238 241  33 225 222 199 139  44 151 237 121  45 231  15 
						189 210  97 156  34  18  10  35  36  30  91   7   2   8 185 248 
						248 108 241 208 170 115  49  48 252  62 195 179 130 173 248 226 
						 89  17 197 202  12  21 101 123   6  29  66  35 172 130  88 134 
						 98  58  59  60 174 177 218  39 205 125 242 120 183  62 216 251 
						122 136  93  72  24  46 177  80 242 109  11  82  89  95  12  47 
						 12 105 132 105 121 217 128 115  35  86 193 133  71 107  40 117 
						  8 226  66 160 187 143 147 128  82 221 226  32 223 226 126  18 
						  6 150 121 186 217 194 212  13 110 105  51  67  69 255 108 102 
						183 185  73  74  65 136   3  56  68  25   9 253  20   2  12 209 
						199  42  42  91  33 140  54 183  55 155 151 134  96 239  36 125 
						251 193  64 252 232 173 135 149  72 245 167  46  31 251  41 121 
						 53  32 131 118 204  28 140 106 146   1 218  68   0  77  48 118 
						 57  45 226   4 123 210  61  98  91 188 124 189 185 157  38   8 
						229  89  95   9 180  83 222 235 213 153 153 171 167 125  22  46 
						174 246  86  99 243  93 106 140 102 129 191 251 246 197  43 131 
						 59 147 168  77 142 103  14  44  33  46 135  84 190   7 241 167 
						110  94 214   7 119 226  84  91 165  82  78 142 177  72 146 165 
						203  48  97 161 249 219 148 125 139 251 142  16  87 173 180  83 
						128 107 156  66  43 105 209 111 124 190  87 229  53  13 148 168 
						105 232  21  92  54 166 235 234  94 178  23  61 183 228 198 167 
						 78 172  46  36 181 234 233 192 183  36  21  96 236  68   2 225 
						121 128 194   4 224 248 250  97 185 160 211  40 131 218 154 154 
						194  71 210 168  59   4 212 112  98 238 198 114 244  76  64  94 
						 56  23  76 117 144 233  65  49 174  99 132  85  34 109 132 162 
						235 153  70  44 244  28 208  25 185 119  41 216 195 184  70  60 
						187  98 249  94 163 162 250 130 180 204  35  98 107  86  56 203 
						107 160 242 161  25 251 116  75 254  48 219 193  78  30   8 103 
						215 138  63  96 170  35   0  58 254 240  36  25 214 129  21  37 
						212  82 254  67 113 181 243 235 `,
						"two": "this should be payload 2: asdfasfsafasfsafdasdffasdflkasjdf;laskdjfas;lkdfjas;lkfdjas;ldfkjas;kldfjasdf;lkasjf;lkasjdfaslkfdjsa;lkfjas;lkdfjsadf;lkasjfl;asdkfjlas;jf;asjdf;lasdflkasjdf;alskdfja;slkdfja;slkdfja;lsdkfjas;ldfjkas;dlfkjas;dflkjasd;flkjasd;flkasjdf;laksdjf;laskdjf;alskdfja;slkdfjas;ldkfjasl;kdfjaskl;dfj;alsdjfklasjfd;lasjldfkjas;lkdfdjsa",
					},
				},
				dataType: "control",
			},
			wantLen: 2,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := marshalAndCompressData(tt.args.d, tt.args.data, tt.args.dataType)
			if (err != nil) != tt.wantErr {
				t.Errorf("marshalAndCompressData() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if len(got) != tt.wantLen {
				t.Errorf("did not properly split batches: wanted %d, got %d", tt.wantLen, len(got))
			}

			for _, payload := range got {
				if payload.Len() > maxPayloadSizeBytes {
					t.Errorf("Payload of len %d is greater than maximum %d", payload.Len(), maxPayloadSizeBytes)
				}
			}
		})
	}
}
